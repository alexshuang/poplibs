// *** Base config, no restrictions on addresses

testConfig convPartialQuarterHalfnx1;

in.size = 1
in[i].size = 384
in[i]=[1,5)

weights.size = 2
weights[i].size = 2048
weights[i] = [1,5)

out.size = 1
out[i].size = 96
out[i] = [2,5)

// No-op worklist
// Worklist entries are outOffset, length-3, inOffset
worklists.size = 24
worklists[i].size = 3
worklists[i]={0, -3, 0}

inMetadata.size = 1
inMetadata[0].size = 1
inMetadata[0] = {0x8a}

weightsMetadata.size = 1
weightsMetadata[0].size = 1
weightsMetadata[0] = {0x8a}

zerosInfo=96
numConvGroupsM1 = 0
numOutGroupsM1=0
numInGroups=1
transformedInStride=0x300c03
transformedInRowStride=1
outChansPerGroup=16
transformedOutStride=1
inChansPerGroup=32
ampKernelHeightM1=0
kernelInnerElementsM1=0
kernelOuterSizeM1=1


// The reason to do the tests below is to check for overread with
// a negative OUTPUT stride

// *** Length 1 worklist entry, in[] in the segment below out[]
testConfig quarterHalfnx1Length1 : convPartialQuarterHalfnx1;
transformedOutStride=0x7f9 //1,-7
worklists[0]={0, -2, 0}
&in[i]=0x7fe00
&out[i]=0x80000

// *** Length 2 worklist entry, in[] in the segment below out[]
testConfig quarterHalfnx1Length2 : convPartialQuarterHalfnx1;
transformedOutStride=0x7f9
worklists[0]={ 4, -1, 0}
&in[i]=0x7fe00
&out[i]=0x80000

// *** Length 3 worklist entry, in[] in the segment below out[]
testConfig quarterHalfnx1Length3 : convPartialQuarterHalfnx1;
transformedOutStride=0x7f9
worklists[0]={ 8, 0, 0}
&in[i]=0x7fe00
&out[i]=0x80000

// *** Length 4 worklist entry, in[] in the segment below out[]
testConfig quarterHalfnx1Length4 : convPartialQuarterHalfnx1;
transformedOutStride=0x7f9
worklists[0]={ 12, 1, 0}
&in[i]=0x7fe00
&out[i]=0x80000

// *** Length 5 worklist entry, in[] in the segment below out[]
testConfig quarterHalfnx1Length5 : convPartialQuarterHalfnx1;
transformedOutStride=0x7f9
worklists[0]={ 16, 2, 0}
&in[i]=0x7fe00
&out[i]=0x80000
